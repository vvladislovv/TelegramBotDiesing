from aiogram import Bot, Dispatcher,executor, types
from dotenv import load_dotenv
import os
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup
from Button import kb_btns,kb_linkBtns,buyMain,Btny
import time

StorageMemary = MemoryStorage()
BotAPI = Bot(os.getenv('TOKEN'))
dp = Dispatcher(bot=BotAPI,storage=StorageMemary)

class QuestStatesGroup(StatesGroup):
    QuestZero = State()
    QuestOne = State()
    QuestTwo = State()
    QuestThree = State()
    QuestFour = State()


class QuestStatesGroupTwo(StatesGroup):
    QuestZero = State()
    QuestOne = State()
    QuestTwo = State()
    QuestThree = State()

Compp = False
NoCompp = False

# Quest Comp -- error bag key and lagier
@dp.message_handler(content_types=['text'], state=QuestStatesGroup.QuestZero)
async def loung_QuseFour(msg: types.Message, state: FSMContext) -> None:
    await msg.answer('–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –Ω–∞–∑–≤–∞–Ω–∏–µ?')
    async with state.proxy() as data:
        data['QuestZero'] = msg.text
        print(data)
    await QuestStatesGroup.next()

@dp.message_handler(content_types=['text'], state=QuestStatesGroup.QuestOne)
async def loung_QuseFour(msg: types.Message, state: FSMContext) -> None:
    await msg.answer('–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –Ω–∞–∑–≤–∞–Ω–∏–µ?')
    async with state.proxy() as data:
        data['QuestOne'] = msg.text
        print(data)
    await msg.answer('–ß—Ç–æ –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ —Å–≤–æ–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º?')
    await QuestStatesGroup.next()

@dp.message_handler(content_types=['text'], state=QuestStatesGroup.QuestTwo)
async def loung_QuseOne(msg: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['QuestTwo'] = msg.text
    await msg.answer('–ö–∞–∫–∏–µ —É –≤–∞—Å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞?')
    await QuestStatesGroup.next()

@dp.message_handler(content_types=['text'], state=QuestStatesGroup.QuestThree)
async def loung_QuseTwo(msg: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['QuestThree'] = msg.text
    await msg.answer('–ö–∞–∫–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è —Å –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–ø–∞–Ω–∏—è?')
    await QuestStatesGroup.next()

@dp.message_handler(content_types=['text'], state=QuestStatesGroup.QuestFour)
async def loung_QuseFour(msg: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['QuestFour'] = msg.text
        print(data)
    await msg.answer('–î–∏–∑–∞–π–Ω —á–µ–≥–æ –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è?')
    await state.finish()


#Quest Coper
@dp.message_handler(content_types=['text'], state=QuestStatesGroupTwo.QuestZero)
async def loung_QuseOne(msg: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['QuestZero'] = msg.text
    await msg.answer('–ß—Ç–æ –∫–æ–º–ø–∞–Ω–∏—è –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–≤–æ–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º?')
    await QuestStatesGroupTwo.next()
    
@dp.message_handler(content_types=['text'], state=QuestStatesGroupTwo.QuestOne)
async def loung_QuseOne(msg: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['QuestOne'] = msg.text
    await msg.answer('–ß—Ç–æ –∫–æ–º–ø–∞–Ω–∏—è –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–≤–æ–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º?')
    await QuestStatesGroupTwo.next()

@dp.message_handler(content_types=['text'], state=QuestStatesGroupTwo.QuestTwo)
async def loung_QuseTwo(msg: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['QuestTwo'] = msg.text
    await msg.answer('–ö–∞–∫–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–æ–º–ø–∞–Ω–∏–∏?')
    await QuestStatesGroupTwo.next()

@dp.message_handler(content_types=['text'], state=QuestStatesGroupTwo.QuestThree)
async def loung_QuseThree(msg: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['QuestThree'] = msg.text
    await msg.answer('–ö–∞–∫–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è —Å –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–ø–∞–Ω–∏—è?')
    await QuestStatesGroupTwo.next()

'''@dp.message_handler(content_types=['text'], state=QuestStatesGroupTwo.QuestFour)
async def loung_QuseFour(msg: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['QuestFour'] = msg.text
        print(data)
    await msg.answer('–î–∏–∑–∞–π–Ω —á–µ–≥–æ –≤–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è?')
    await state.finish()
'''

@dp.message_handler(commands=['start'])
async def NewUserOpenKB(message: types.Message) -> None:
    await message.answer('–ü—Ä–∏–≤–µ—Ç!',reply_markup=kb_btns)
    
@dp.message_handler(text=['–£–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏'])
async def CloseKB(message: types.Message) -> None:
    await message.answer('',reply_markup=types.ReplyKeyboardRemove())
    
# –ü–∞—Ä—Ç—Ñ–æ–ª–∏–æ
@dp.message_handler(text = '–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ')
async def conctacts1(message: types.Message):
    TextTable = [
        '–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–æ–µ–º—É –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ üìå',
        '–ü–µ—Ä–µ—Ö–æ–¥–∏ –Ω–∏–∂–µ –ø–æ –∫–Ω–æ–ø–∫–µ'
    ]
    await message.answer(text='\n'.join(TextTable),reply_markup=kb_linkBtns)


@dp.message_handler(text = '–ü—Ä–∞–π—Å —É—Å–ª—É–≥')
async def conctacts1(message: types.Message):
    TextTable = [
        '–í–∏–∑–∏—Ç–∫–∞ ‚Äî 2.500 —Ä—É–±–ª–µ–π',
        '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç ‚Äî 3.000 —Ä—É–±–ª–µ–π',
        '–ü–æ—Å—Ç ‚Äî 2.000 —Ä—É–±–ª–µ–π',
        '–ê—Ñ–∏—à–∞ ‚Äî 3.000 —Ä—É–±–ª–µ–π',
        '',
        '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã VK ‚Äî –æ—Ç 5.000 —Ä—É–±–ª–µ–π',
        '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ YouTube –∫–∞–Ω–∞–ª–∞ ‚Äî –æ—Ç 5.000 —Ä—É–±–ª–µ–π',
        '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ ‚Äî –æ—Ç 5.000 —Ä—É–±–ª–µ–π',
        '–õ–æ–≥–æ—Ç–∏–ø ‚Äî –æ—Ç 10.000 —Ä—É–±–ª–µ–π',
        '',
        '–õ–æ–≥–æ–±—É–∫ ‚Äî –¶–µ–Ω–∞ –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è –ª–∏—á–Ω–æ',
        '–ë—Ä–µ–Ω–¥–±—É–∫ ‚Äî –¶–µ–Ω–∞ –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è –ª–∏—á–Ω–æ',
        '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∏—Ä–º–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è ‚Äî –¶–µ–Ω–∞ –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è –ª–∏—á–Ω–æ',
        '',
        '–ï—Å–ª–∏ —É—Å–ª—É–≥–∏ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –£—Å–ª—É–≥–∏ –Ω–µ—å',
    ]
    await message.answer(text='\n'.join(TextTable), reply_markup=buyMain) # –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç 
    
@dp.callback_query_handler()
async def vote_callBack(callBack: types.CallbackQuery):
    if callBack.data == '–£—Å–ª—É–≥–∏':
       await callBack.message.answer(text="–í–∞—à–µ–π —É—Å–ª—É–≥–∏ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ? –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª–∏—á–Ω–æ, –∏ –º—ã –æ–±—Å—É–¥–∏–º —Ç–æ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ @kondrachuk_me")
    elif callBack.data == '–ö–æ–º–ø–∞–Ω–∏–µ–π':
       # await callBack.message.answer('–ö–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?')
        await QuestStatesGroupTwo.QuestOne.set()
    elif callBack.data == '–ß–∞—Å—Ç–Ω—ã–º':
        #await callBack.message.answer(text="–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –Ω–∞–∑–≤–∞–Ω–∏–µ?")
        await QuestStatesGroup.QuestOne.set()

@dp.message_handler(text = '–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑')
async def conctacts2(message: types.Message):
    await message.answer(f'–°–µ–π—á–∞—Å –º–Ω–µ –Ω–∞–¥–æ –∑–∞–¥–∞—Ç—å —Ç–µ–±–µ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤')
    time.sleep(1)
    await message.answer('–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∫–æ–º–ø–∞–Ω–∏–µ–π –∏–ª–∏ —á–∞—Å—Ç–Ω—ã–º –ª–∏—Ü–æ–º?',reply_markup=Btny)   

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)